{"./":{"url":"./","title":"简介","keywords":"","body":"简介 风行，一场戏；逐浪，一梦空~ 说明：整理内容来自于源码、官方文档、书籍、网络等方面，如涉及不能引用或者需要标明出处的内容，请联系pslshuihuo@163.com。 : 是高中时代日记本的名字，取自于“君子坦荡荡”，时光荏苒，愿中依然少年。 梳理个人技术栈，以便知识查阅、技术体系结构补齐。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"java/jdk/":{"url":"java/jdk/","title":"JDK","keywords":"","body":"JDK linux环境配置JDK #编辑文件 vim /etc/profile #添加环境变量 export JAVA_HOME=/fw/java/jdk1.8.0_191 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH export JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin export PATH=$PATH:${JAVA_PATH} #激活 source /etc/profile console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"java/jdk/concurrent.html":{"url":"java/jdk/concurrent.html","title":"concurrent","keywords":"","body":"第一部分 Aomic数据类型 这部分都被放在java.util.concurrent.atomic这个包里面，实现了原子化操作的数据类型，包括 Boolean, Integer, Long, 和Referrence这四种类型以及这四种类型的数组类型。 第二部分 锁 这部分都被放在java.util.concurrent.lock这个包里面，实现了并发操作中的几种类型的锁 第三部分 java集合框架中的一些数据结构的并发实现 这部分实现的数据结构主要有List, Queue和Map。 第四部分 多线程任务执行 这部分大体上涉及到三个概念， Callable 被执行的任务 Executor 执行任务 Future 异步提交任务的返回数据 第五部分 线程管理类 这部分主要是对线程集合的管理的实现，有CyclicBarrier, CountDownLatch,Exchanger等一些类. console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"java/jdk/threadlocal.html":{"url":"java/jdk/threadlocal.html","title":"threadlocal","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"java/tomcat/":{"url":"java/tomcat/","title":"Tomcat","keywords":"","body":"Tomcat 简介         Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML页面的访问请求。实际上Tomcat 部分是Apache 服务器的扩展，但它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。         尽管Tomcat也可以作为独立的Java Web服务器，但在对静态资源(HTML、图像文件等)的处理速度，Web服务器管理等方面都不如Apache、IIS服务器等其他专业的HTTP服务器，因此在实际应用中，常常把Tomcat与其他的HTTP服务器集成使用。对于不支持Servlet/JSP的HTTP服务器，可以通过Tomcat服务器来运行Servlet/JSP组件。         当Tomcat与其他HTTP服务器集成时，Tomcat服务器的工作模式通常为进程外的Servlet容器，Tomcat服务器与其他HTTP服务器之间通过专门的插件来通信。 解压目录简介 Tomcat的目录结构如下： bin：可执行文件（如启动和关闭Tomcat，有Windows和Linux脚本） conf：存放各种配置文件 lib：依赖的所有的jar包 logs：日志文件 temp：临时文件 webapps：存放web应用（默认的两个web应用，admin和manager，用来管理Tomcat的web服务）。 work：工作目录（jsp经过编译后生成的servlet） 配置文件简介 server.xml——Tomcat中最重要的配置文件。定义了Tomcat的体系结构，包括连接器端口、连接数、集群、虚拟目录、访问日志等 web.xml——默认文件的设置 context.xml——全局context的配置文件，包括JNDI（Java Naming and Directory Interface,Java命名和目录接口）等信息的配置 tomcat-user.xml——Tomcat管理员身份配置文件，关键是设置管理员的账户和密码 logging.properties——Tomcat日志配置文件，可以修改默认Tomcat日志路径和名称 Tomcat工作原理         当客户请求某个资源时，Servlet 容器使用 ServletRequest 对象把客户的请求信息封装起 来，然后调用 Java Servlet API 中定义的 Servlet 的一些生命周期方法，完成 Servlet 的执行， 接着把 Servlet 执行的要返回给客户的结果封装到 ServletResponse 对象中，最后 Servlet 容 器把客户的请求发送给客户，完成为客户的一次服务过程。 Tomcat工作模式 （1）：独立的Servlet容器（默认） （2）：进程内的Servlet容器（基于JNI） （3）：进程外的Servlet容器（基于IPC） JNI:Java Native Interface，本地通信接口，通过这个接口，Java 程序可以和其他语言编写的本地程序进行通信。 IPC:Inter Process Communication,进程间通信 Tomcat既可以作为独立的容器，又可以和其他Web服务器集成（例如IIS，Apache）作为进程内、进程间Servlet容器 Servlet容器分为： 1.  Web服务器插件：在其他的WEB服务器内部地址空间打开一个JVM，Java容器在这个开辟的JVM上运行Servlet 2.  Java容器 Tomcat组织结构 顶层类元素，可包含多个 Service 顶层类元素，可包含一个 Engine 和多个 Connector，本身并不能处理客户请求 连接器元素，代表通信接口，本身并不能处理客户请求 容器元素，为 Service 处理客户请求，可包含多个 Host 容器元素，为 Host 处理客户请求，可包含多个 Context 容器元素，为 Web 应用处理客户请求 Connector 组件表示一个接口，通过这个接口接收客户的请求，然后发送给其他的容器组件，最后再把服务器的响应结果传递给客户。 容器类元素： 上面介绍的 3 个组件：server,service,connector本身并不能处理客户请求，也不能生成响应。在 Tomcat 中只有 3 个组件是可以处理客户请求并生成响应的，这 3 个组件分别是 Engine、Host 和 Context。这 3 个组件分别代表了不同的服务范围，通过嵌套关系可以知道 3 个组件的范围有如下的关 系:Engine>Host>Context。 Engine 组件下可以包含多个 Host 组件，它为特定的 Service 组件处理所有客户请求。 一个 Host 组件代表一个虚拟主机，一个虚拟主机中可以包含多个 Web 应用(Context 组件)。 Context 组件代表一个 Web 应用。 WEB服务器种类： Java Web 服务器软件按照规模从小到大依次有:JSWDK、JServ、Resin、Tomcat、JRun、JBoss、WebLogic、WebSphere 等，其中 JSWDK、JServ、Resin、Tomcat、JRun、JBoss 是完全免费的软件。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"other/git.html":{"url":"other/git.html","title":"Git","keywords":"","body":"git操作： 在本地新建一个分支： git branch [newBranch] 切换到你的新分支: git checkout [newBranch] 创建并切换到新分支： git checkout -b [newBranch] 将新分支发布在github上： git push origin newBranch 在本地删除一个分支： git branch -d newBranch git co -b feature/fwpsl git push origin feature/fwpsl 在github远程端删除一个分支： git push origin :newBranch (分支名前的冒号代表删除) git checkout -- 指令从先从缓存区中拉取版本还原，如果没有 再到版本库中拉取还原。 git branch --set-upstream-to=origin/feature/ 分支跟踪 git config --add core.filemode false git log --pretty=oneline：将只会显示提交的commit id号和对应的注释 回退： ​ git reset --hard commit_id 或则是 git reset --hard HEAD^ 回退版本 ​ # hard选项，表示彻底将工作区、暂存区和版本库记录恢复到指定的版本库 ​ 使用“git push -f”提交更改 反做： ​ 使用“git revert -n 版本号”命令 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"other/gitbook.html":{"url":"other/gitbook.html","title":"GitBook","keywords":"","body":"GitBook console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"other/markdown.html":{"url":"other/markdown.html","title":"Markdown","keywords":"","body":"Markdown 语法 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"other/expression.html":{"url":"other/expression.html","title":"正则表达式","keywords":"","body":"正则表达式 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}